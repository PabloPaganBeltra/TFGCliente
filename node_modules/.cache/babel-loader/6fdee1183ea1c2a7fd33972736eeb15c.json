{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pablo PC\\\\Desktop\\\\Carpeta\\\\AproyectosReact\\\\MERNTasks\\\\cliente\\\\src\\\\context\\\\autenticacion\\\\authState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport AuthContext from './authContext';\nimport AuthReducer from './authReducer';\nimport clienteAxios from '../../config/axios';\nimport { REGISTRO_EXITOSO, REGISTRO_ERROR, OBTENER_USUARIO, LOGIN_EXITOSO, LOGIN_ERROR, CERRAR_SESION } from '../../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthState = props => {\n  _s();\n\n  const initialState = {\n    token: localStorage.getItem('token'),\n    autenticado: null,\n    usuario: null,\n    mensaje: null\n  };\n  const [state, dispatch] = useReducer(AuthReducer, initialState); //funciones para registrar los usuarios\n\n  const registrarUsuario = async datos => {\n    try {\n      const respuesta = await clienteAxios.post('/api/usuarios', datos);\n      console.log(respuesta);\n      dispatch({\n        type: REGISTRO_EXITOSO\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: REGISTRO_ERROR\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token: state.token,\n      autenticado: state.autenticado,\n      usuario: state.usuario,\n      mensaje: state.mensaje\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthState, \"h4meAN672mISt93ielJXXMKemns=\");\n\n_c = AuthState;\nexport default AuthState;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthState\");","map":{"version":3,"sources":["C:/Users/Pablo PC/Desktop/Carpeta/AproyectosReact/MERNTasks/cliente/src/context/autenticacion/authState.js"],"names":["React","useReducer","AuthContext","AuthReducer","clienteAxios","REGISTRO_EXITOSO","REGISTRO_ERROR","OBTENER_USUARIO","LOGIN_EXITOSO","LOGIN_ERROR","CERRAR_SESION","AuthState","props","initialState","token","localStorage","getItem","autenticado","usuario","mensaje","state","dispatch","registrarUsuario","datos","respuesta","post","console","log","type","error","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,OAAOC,YAAP,MAAyB,oBAAzB;AAEA,SACIC,gBADJ,EAEIC,cAFJ,EAGIC,eAHJ,EAIIC,aAJJ,EAKIC,WALJ,EAMIC,aANJ,QAOQ,aAPR;;;AASC,MAAMC,SAAS,GAAGC,KAAK,IAAG;AAAA;;AAEvB,QAAMC,YAAY,GAAG;AACjBC,IAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,CADU;AAEjBC,IAAAA,WAAW,EAAE,IAFI;AAGjBC,IAAAA,OAAO,EAAE,IAHQ;AAIjBC,IAAAA,OAAO,EAAE;AAJQ,GAArB;AAOA,QAAM,CAAEC,KAAF,EAASC,QAAT,IAAsBpB,UAAU,CAACE,WAAD,EAAcU,YAAd,CAAtC,CATuB,CAWvB;;AACA,QAAMS,gBAAgB,GAAG,MAAMC,KAAN,IAAa;AAClC,QAAI;AAEA,YAAMC,SAAS,GAAG,MAAMpB,YAAY,CAACqB,IAAb,CAAkB,eAAlB,EAAmCF,KAAnC,CAAxB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AAEAH,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEvB;AADD,OAAD,CAAR;AAIH,KATD,CASE,OAAOwB,KAAP,EAAc;AACZH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AAEAR,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEtB;AADD,OAAD,CAAR;AAGH;AACJ,GAjBD;;AAoBA,sBACI,QAAC,WAAD,CAAa,QAAb;AACI,IAAA,KAAK,EAAG;AACJQ,MAAAA,KAAK,EAAEM,KAAK,CAACN,KADT;AAEJG,MAAAA,WAAW,EAAEG,KAAK,CAACH,WAFf;AAGJC,MAAAA,OAAO,EAAEE,KAAK,CAACF,OAHX;AAIJC,MAAAA,OAAO,EAAEC,KAAK,CAACD;AAJX,KADZ;AAAA,cAOGP,KAAK,CAACkB;AAPT;AAAA;AAAA;AAAA;AAAA,UADJ;AAYF,CA5CD;;GAAMnB,S;;KAAAA,S;AA8CN,eAAeA,SAAf","sourcesContent":["import React, { useReducer } from 'react';\r\nimport AuthContext from './authContext';\r\nimport AuthReducer from './authReducer';\r\n\r\nimport clienteAxios from '../../config/axios';\r\n\r\nimport { \r\n    REGISTRO_EXITOSO,\r\n    REGISTRO_ERROR,\r\n    OBTENER_USUARIO,\r\n    LOGIN_EXITOSO,\r\n    LOGIN_ERROR,\r\n    CERRAR_SESION\r\n } from '../../types';\r\n\r\n const AuthState = props =>{\r\n\r\n    const initialState = {\r\n        token: localStorage.getItem('token'),\r\n        autenticado: null,\r\n        usuario: null,\r\n        mensaje: null\r\n    }\r\n\r\n    const [ state, dispatch ] = useReducer(AuthReducer, initialState);\r\n\r\n    //funciones para registrar los usuarios\r\n    const registrarUsuario = async datos=>{\r\n        try {\r\n            \r\n            const respuesta = await clienteAxios.post('/api/usuarios', datos );\r\n            console.log(respuesta);\r\n\r\n            dispatch({\r\n                type: REGISTRO_EXITOSO\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            dispatch({\r\n                type: REGISTRO_ERROR\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    return(\r\n        <AuthContext.Provider\r\n            value ={{\r\n                token: state.token,\r\n                autenticado: state.autenticado,\r\n                usuario: state.usuario,\r\n                mensaje: state.mensaje\r\n            }}\r\n        >{ props.children }\r\n\r\n        </AuthContext.Provider>\r\n    )\r\n }\r\n\r\n export default AuthState;"]},"metadata":{},"sourceType":"module"}